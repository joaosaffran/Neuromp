Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.4.181 Build 20170411

Compiler options: -std=c99 -O3 -parallel -par-threshold0 -qopt-report-phase=par -qopt-report:5 -o ./bin/gol_icc

Begin optimization report for: main(int, char **)

    Report from: Auto-parallelization optimizations [par]


LOOP BEGIN at ./src/gol_icc.c(7,5) inlined into ./src/gol_icc.c(42,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (10:25) and call:rand(void) (10:25)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (10:25) and call:rand(void) (10:25)

   LOOP BEGIN at ./src/gol_icc.c(9,9) inlined into ./src/gol_icc.c(42,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (10:25) and call:rand(void) (10:25)
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (10:25) and call:rand(void) (10:25)
   LOOP END
LOOP END

LOOP BEGIN at ./src/gol_icc.c(7,5) inlined into ./src/gol_icc.c(43,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (10:25) and call:rand(void) (10:25)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (10:25) and call:rand(void) (10:25)

   LOOP BEGIN at ./src/gol_icc.c(9,9) inlined into ./src/gol_icc.c(43,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (10:25) and call:rand(void) (10:25)
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (10:25) and call:rand(void) (10:25)
   LOOP END
LOOP END

LOOP BEGIN at ./src/gol_icc.c(46,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between i (46:24) and i (17:5)
   remark #17106: parallel dependence: assumed ANTI dependence between i (17:5) and i (46:24)
   remark #17106: parallel dependence: assumed FLOW dependence between i (46:24) and i (17:5)
   remark #17106: parallel dependence: assumed ANTI dependence between i (17:5) and i (46:24)
   remark #17106: parallel dependence: assumed FLOW dependence between i (46:24) and i (17:5)
   remark #17106: parallel dependence: assumed ANTI dependence between i (17:5) and i (46:24)
   remark #17106: parallel dependence: assumed ANTI dependence between i (17:5) and i (46:24)
   remark #17106: parallel dependence: assumed FLOW dependence between i (46:24) and i (17:5)
   remark #17106: parallel dependence: assumed ANTI dependence between i (17:5) and i (46:24)
   remark #17106: parallel dependence: assumed FLOW dependence between i (46:24) and i (17:5)
   remark #17106: parallel dependence: assumed ANTI dependence between i (17:5) and i (46:24)
   remark #17106: parallel dependence: assumed FLOW dependence between i (46:24) and i (17:5)

   LOOP BEGIN at ./src/gol_icc.c(47,9)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between j (47:27) and j (19:13)
      remark #17106: parallel dependence: assumed ANTI dependence between j (19:13) and j (47:27)
      remark #17106: parallel dependence: assumed FLOW dependence between j (47:27) and j (19:13)
      remark #17106: parallel dependence: assumed ANTI dependence between j (19:13) and j (47:27)
      remark #17106: parallel dependence: assumed ANTI dependence between j (19:13) and j (47:27)
      remark #17106: parallel dependence: assumed FLOW dependence between j (47:27) and j (19:13)
      remark #17106: parallel dependence: assumed ANTI dependence between j (19:13) and j (47:27)
      remark #17106: parallel dependence: assumed FLOW dependence between j (47:27) and j (19:13)

      LOOP BEGIN at ./src/gol_icc.c(17,5) inlined into ./src/gol_icc.c(48,25)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between _ii (17:33) and _ii (19:13)
         remark #17106: parallel dependence: assumed ANTI dependence between _ii (19:13) and _ii (17:33)
         remark #17106: parallel dependence: assumed ANTI dependence between _ii (19:13) and _ii (17:33)
         remark #17106: parallel dependence: assumed FLOW dependence between _ii (17:33) and _ii (19:13)

         LOOP BEGIN at ./src/gol_icc.c(18,9) inlined into ./src/gol_icc.c(48,25)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ./src/gol_icc.c(47,9)
   <Remainder loop for vectorization>

      LOOP BEGIN at ./src/gol_icc.c(17,5) inlined into ./src/gol_icc.c(48,25)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at ./src/gol_icc.c(47,9)
   <Remainder loop for vectorization>

      LOOP BEGIN at ./src/gol_icc.c(17,5) inlined into ./src/gol_icc.c(48,25)
         remark #25460: No loop optimizations reported
      LOOP END

      LOOP BEGIN at ./src/gol_icc.c(17,5) inlined into ./src/gol_icc.c(48,25)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: calcNeigh(char **, int, int)

    Report from: Auto-parallelization optimizations [par]


LOOP BEGIN at ./src/gol_icc.c(17,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ jj i mat j ii } lastprivate={ } firstlastprivate={ } reduction={ resp }

   LOOP BEGIN at ./src/gol_icc.c(18,9)
   LOOP END

   LOOP BEGIN at ./src/gol_icc.c(18,9)
   LOOP END
LOOP END

LOOP BEGIN at ./src/gol_icc.c(17,5)
   remark #25460: No loop optimizations reported

   LOOP BEGIN at ./src/gol_icc.c(18,9)
      remark #17107: loop was not parallelized: inner loop
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: show(char **)

    Report from: Auto-parallelization optimizations [par]


LOOP BEGIN at ./src/gol_icc.c(25,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:printf(const char *__restrict__, ...) (28:17) and call:printf(const char *__restrict__, ...) (32:9)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:printf(const char *__restrict__, ...) (32:9) and call:printf(const char *__restrict__, ...) (28:17)

   LOOP BEGIN at ./src/gol_icc.c(26,9)
      remark #17104: loop was not parallelized: existence of parallel dependence
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: init(char **)

    Report from: Auto-parallelization optimizations [par]


LOOP BEGIN at ./src/gol_icc.c(7,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between call:malloc(size_t) (8:25) and mat[i] (10:13)
   remark #17106: parallel dependence: assumed ANTI dependence between mat[i] (10:13) and call:malloc(size_t) (8:25)

   LOOP BEGIN at ./src/gol_icc.c(9,9)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between mat[i*8][j] (10:13) and mat[i*8][j] (10:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between mat[i*8][j] (10:13) and mat[i*8][j] (10:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (10:25) and call:rand(void) (10:25)
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (10:25) and call:rand(void) (10:25)
   LOOP END
LOOP END
===========================================================================

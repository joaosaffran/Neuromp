Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.4.181 Build 20170411

Compiler options: -std=c99 -O3 -parallel -par-threshold0 -qopt-report-phase=par -qopt-report:5 -o ./bin/silly_sort_icc

Begin optimization report for: main()

    Report from: Auto-parallelization optimizations [par]


LOOP BEGIN at ./src/silly_sort_icc.c(6,5) inlined into ./src/silly_sort_icc.c(21,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5) inlined into ./src/silly_sort_icc.c(21,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ in _i } lastprivate={ } firstlastprivate={ } reduction={ }
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5) inlined into ./src/silly_sort_icc.c(21,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5) inlined into ./src/silly_sort_icc.c(21,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(29,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ j pos in i } lastprivate={ } firstlastprivate={ } reduction={ }

   LOOP BEGIN at ./src/silly_sort_icc.c(30,7)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(38,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between out[*(pos+i*4)] (39:7) and out[*(pos+i*4)] (39:7)
   remark #17106: parallel dependence: assumed OUTPUT dependence between out[*(pos+i*4)] (39:7) and out[*(pos+i*4)] (39:7)
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(47,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5) inlined into ./src/silly_sort_icc.c(21,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5) inlined into ./src/silly_sort_icc.c(21,5)
   remark #25460: No loop optimizations reported
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5) inlined into ./src/silly_sort_icc.c(21,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(29,5)
   remark #25460: No loop optimizations reported

   LOOP BEGIN at ./src/silly_sort_icc.c(30,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between pos[i] (32:13) and pos[i] (32:13)
      remark #17106: parallel dependence: assumed ANTI dependence between pos[i] (32:13) and pos[i] (32:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between pos[i] (32:13) and pos[i] (32:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between pos[i] (32:13) and pos[i] (32:13)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: init(int *, int)

    Report from: Auto-parallelization optimizations [par]


LOOP BEGIN at ./src/silly_sort_icc.c(6,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ .2 } private={ } firstprivate={ n in i } lastprivate={ } firstlastprivate={ } reduction={ }
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5)
   remark #25460: No loop optimizations reported
LOOP END

LOOP BEGIN at ./src/silly_sort_icc.c(6,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================
